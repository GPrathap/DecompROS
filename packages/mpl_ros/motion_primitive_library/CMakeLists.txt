cmake_minimum_required(VERSION 2.8)
project(motion_primitive_library)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wno-deprecated-declarations")
SET(CMAKE_BUILD_TYPE RelWithDebInfo)
set(USE_ROS TRUE)

IF(USE_ROS)
  MESSAGE(STATUS "Compile with ROS.")
  # roslib cmake_modules
  FIND_PACKAGE(catkin REQUIRED COMPONENTS decomp_util)
  catkin_package(
    DEPENDS Eigen3
    CATKIN_DEPENDS 
    INCLUDE_DIRS include 
    LIBRARIES primitive poly_solver mp_map_util bfs mp_decomp_util
    )
  INCLUDE_DIRECTORIES(${catkin_INCLUDE_DIRS})
  LIST(APPEND LINK_LIBS ${catkin_LIBRARIES})
ENDIF()

FIND_PACKAGE(VTK REQUIRED)

IF(NOT VTK_FOUND)
  SET(DEFAULT FALSE)
  SET(REASON "VTK was not found.")
  MESSAGE("VTK was not found")
ELSE()
  INCLUDE(${VTK_USE_FILE})
  MESSAGE("VTK was found")
ENDIF()

FIND_PACKAGE(Eigen3 REQUIRED)
FIND_PACKAGE(OpenCV REQUIRED )
FIND_PACKAGE(PkgConfig REQUIRED)
#PKG_CHECK_MODULES(EIGEN3 REQUIRED eigen3)
PKG_CHECK_MODULES(YAMLCPP REQUIRED yaml-cpp)
#FIND_PACKAGE( Boost COMPONENTS filesystem system REQUIRED )
include_directories(${EIGEN3_INCLUDE_DIR} ${OpenCV_INCLUDE_DIRS} include)


IF(YAMLCPP_FOUND)
  MESSAGE(STATUS "Found yaml-cpp.")
  #MESSAGE("YAMLCPP_INCLUDE_DIRS: ${YAMLCPP_INCLUDE_DIRS}")
  #MESSAGE("YAMLCPP_LIBRARIES: ${YAMLCPP_LIBRARIES}")
  #MESSAGE("YAMLCPP_LIBRARY_DIRS: ${YAMLCPP_LIBRARY_DIRS}")
ELSE()
  MESSAGE(FATAL_ERROR "Could not find yaml-cpp.")
ENDIF()



add_library(primitive src/primitive/primitive.cpp
  src/primitive/primitive_util.cpp
  src/primitive/trajectory.cpp
  src/primitive/math.cpp)

add_library(poly_solver src/primitive/poly_solver.cpp
  src/primitive/poly_traj.cpp)
target_link_libraries(poly_solver primitive)

add_library(mp_map_util src/planner/mp_map_util.cpp
  src/planner/mp_base_util.cpp
  src/planner/astar.cpp)
target_link_libraries(mp_map_util primitive)

add_library(mp_decomp_util src/planner/mp_decomp_util.cpp
  src/planner/mp_base_util.cpp
  src/collision_checking/decomp_util.cpp
  src/planner/astar.cpp)
target_link_libraries(mp_decomp_util primitive ${decomp_util_LIBRARIES})

#add_library(mp_sfc_util src/planner/mp_sfc_util.cpp
#  src/planner/mp_base_util.cpp
#  src/collision_checking/sfc_util.cpp
#  src/planner/astar.cpp)
#target_link_libraries(mp_sfc_util primitive)
#
#
#add_library(vision_util src/collision_checking/vision_util.cpp)
#target_link_libraries(vision_util ${OpenCV_LIBS} primitive)
#add_library(vision_queue_util src/collision_checking/vision_queue_util.cpp)
#target_link_libraries(vision_queue_util vision_util)
#
#add_library(mp_vision_util src/planner/mp_vision_util.cpp
#  src/planner/mp_base_util.cpp
#  src/planner/astar.cpp)
#target_link_libraries(mp_vision_util primitive vision_queue_util)

add_library(bfs src/planner/bfs.cpp)
target_link_libraries(bfs primitive)

add_executable(test_planner_2d test/test_planner_2d.cpp)
target_link_libraries(test_planner_2d mp_map_util ${YAMLCPP_LIBRARIES} ${Boost_LIBRARIES} ${VTK_LIBRARIES})

